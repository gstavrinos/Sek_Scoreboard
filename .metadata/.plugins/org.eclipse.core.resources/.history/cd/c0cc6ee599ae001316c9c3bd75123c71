package stavrinos.sek;

import java.io.BufferedReader;
import java.io.FileReader;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.Scanner;
import java.util.concurrent.Semaphore;

import stavrinos.sek.helpers.Row;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;

public class Controller implements Initializable{

	public ObservableList<Row> data = FXCollections.observableArrayList();
	public static boolean newdata = false;
	Scanner scanner;
	public static final Semaphore available = new Semaphore(1);
	
    @FXML private TableView<Row> tableView;
    @FXML private TableColumn<Row, String> UserName;
    @FXML private TableColumn<Row, Integer> Score;
    @FXML private TableColumn<Row, String> Time;
    @FXML private TableColumn<Row, Integer> Obstacles;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
    	UserName.setCellValueFactory(new PropertyValueFactory<Row, String>("name"));
    	Score.setCellValueFactory(new PropertyValueFactory<Row, Integer>("score"));
    	Time.setCellValueFactory(new PropertyValueFactory<Row, String>("time"));
    	Obstacles.setCellValueFactory(new PropertyValueFactory<Row, Integer>("obstacles"));
        Score.setSortType(TableColumn.SortType.DESCENDING);
        tableView.setItems(data);
        new Thread() {
            public void run() {
                try {
                    while(true){
                    	//while(!newdata){
                    	available.acquire();
                    	//}
                    		newdata = false;
                    		BufferedReader reader = new BufferedReader(new FileReader("scores.txt"));
                    		String dataInString = null;
                        	int i = 0;
                    		while ((dataInString = reader.readLine()) != null) {
                    			i++;
                    			System.out.println(i);
                    			//scanner = new Scanner(dataInString);
                    			//while (scanner.hasNextLine()) {
                    				//String line = scanner.nextLine();
                    				String[] s = dataInString.split("\\s+");
                    				if(s.length == 5){
                    					add(new Row(s[0] + " " + s[1],Integer.parseInt(s[2]),s[3],Integer.parseInt(s[4])));
                    				}
                    			//}
                    		}
                    		//clearData();
            				//scanner.close();
                    		reader.close();
                    }
                } catch(Exception e) {
                    System.out.println("Controller\n"+e);
                }
            }  
        }.start();
    }
    
    public void add(final Row r){
    	Platform.runLater(new Runnable() {
            @Override
            public void run() {
            	data.add(r);
            	tableView.setItems(data);
            	if(data.size()>0){
            		//tableView.getSortOrder().add(Score);
            	}
            }
        });
    }
    
    public void clearData(){
    	data.clear();
    }

	public void add(ObservableList<Row> d) {
    	tableView.setItems(data);
    	tableView.getSortOrder().add(Score);
		
	}
    
    
}
